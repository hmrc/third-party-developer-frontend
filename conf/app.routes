# microservice specific routes

GET         /registration                                                                                controllers.Registration.registration
POST        /registration                                                                                controllers.Registration.register
GET         /confirmation                                                                                controllers.Registration.confirmation

GET         /verification                                                                                controllers.Registration.verify(code: String)
GET         /resend-verification                                                                         controllers.Registration.resendVerification
GET         /resend-confirmation                                                                         controllers.Registration.resendConfirmation

GET         /login                                                                                       controllers.UserLoginAccount.login
GET         /login/2sv-recommendation                                                                    controllers.UserLoginAccount.get2svRecommendationPage
POST        /login                                                                                       controllers.UserLoginAccount.authenticate
GET         /login/2SV-help                                                                              controllers.UserLoginAccount.get2SVHelpConfirmationPage
POST        /login/2SV-help                                                                              controllers.UserLoginAccount.confirm2SVHelp
GET         /login/2SV-help/complete                                                                     controllers.UserLoginAccount.get2SVHelpCompletionPage
GET         /login-totp                                                                                  controllers.UserLoginAccount.enterTotp
POST        /login-totp                                                                                  controllers.UserLoginAccount.authenticateTotp
GET         /login/2SV-not-set                                                                           controllers.UserLoginAccount.get2SVNotSetPage

GET         /logout                                                                                      controllers.UserLogoutAccount.logout

GET         /logout/survey                                                                               controllers.UserLogoutAccount.logoutSurvey
POST        /logout/survey                                                                               controllers.UserLogoutAccount.logoutSurveyAction

GET         /support                                                                                     controllers.Support.raiseSupportEnquiry
POST        /support                                                                                     controllers.Support.submitSupportEnquiry
GET         /support/submitted                                                                           controllers.Support.thankyou

GET         /locked                                                                                      controllers.UserLoginAccount.accountLocked

GET         /forgot-password                                                                             controllers.Password.showForgotPassword
POST        /forgot-password                                                                             controllers.Password.requestReset

GET         /reset-password-link                                                                         controllers.Password.validateReset(code: String)

GET         /reset-password                                                                              controllers.Password.resetPasswordChange
POST        /reset-password                                                                              controllers.Password.resetPassword
GET         /reset-password/error                                                                        controllers.Password.resetPasswordError

GET         /applications                                                                                controllers.ManageApplications.manageApps

GET         /applications/using-privileged-application-credentials                                       controllers.addapplication.AddApplication.usingPrivilegedApplicationCredentialsPage()
GET         /applications/access-token                                                                   controllers.addapplication.AddApplication.accessTokenSwitchPage()

GET         /applications/add/production/10-days                                                         controllers.addapplication.AddApplication.tenDaysWarning

GET         /applications/add/sandbox                                                                    controllers.addapplication.AddApplication.addApplicationSubordinate
GET         /applications/add/production                                                                 controllers.addapplication.AddApplication.addApplicationPrincipal
GET         /applications/add/switch                                                                     controllers.addapplication.AddApplication.addApplicationProductionSwitch
GET         /applications/add/:id                                                                        controllers.addapplication.AddApplication.soleApplicationToUpliftAction(id: ApplicationId)
POST        /applications/add/switch                                                                     controllers.addapplication.AddApplication.chooseApplicationToUpliftAction


GET         /applications/add/:environment/name                                                          controllers.addapplication.AddApplication.addApplicationName(environment: Environment)
POST        /applications/add/:environment/name                                                          controllers.addapplication.AddApplication.editApplicationNameAction(environment: Environment)

GET         /applications/:id/add/success                                                                controllers.addapplication.AddApplication.addApplicationSuccess(id: ApplicationId)

GET         /applications/:id/team-members                                                               controllers.ManageTeam.manageTeam(id: ApplicationId, error: Option[String])
GET         /applications/:id/team-members/add                                                           controllers.ManageTeam.addTeamMember(id: ApplicationId)
POST        /applications/:id/team-members/add/:addTeamMemberPageMode                                    controllers.ManageTeam.addTeamMemberAction(id: ApplicationId, addTeamMemberPageMode: AddTeamMemberPageMode)
GET         /applications/:id/team-members/:teamMemberHash/remove-confirmation                           controllers.ManageTeam.removeTeamMember(id: ApplicationId, teamMemberHash: String)
POST        /applications/:id/team-members/remove                                                        controllers.ManageTeam.removeTeamMemberAction(id: ApplicationId)

GET         /applications/:id/details                                                                    controllers.Details.details(id: ApplicationId)

GET         /applications/:id/details/change                                                             controllers.Details.changeDetails(id: ApplicationId)
POST        /applications/:id/details/change                                                             controllers.Details.changeDetailsAction(id: ApplicationId)

GET         /applications/:id/details/terms-of-use                                                       controllers.TermsOfUse.termsOfUse(id: ApplicationId)
POST        /applications/:id/details/terms-of-use                                                       controllers.TermsOfUse.agreeTermsOfUse(id: ApplicationId)

GET         /applications/:id/redirect-uris                                                              controllers.Redirects.redirects(id: ApplicationId)
GET         /applications/:id/redirect-uris/add                                                          controllers.Redirects.addRedirect(id: ApplicationId)
POST        /applications/:id/redirect-uris/add                                                          controllers.Redirects.addRedirectAction(id: ApplicationId)
POST        /applications/:id/redirect-uris/delete-confirmation                                          controllers.Redirects.deleteRedirect(id: ApplicationId)
POST        /applications/:id/redirect-uris/delete                                                       controllers.Redirects.deleteRedirectAction(id: ApplicationId)
POST        /applications/:id/redirect-uris/change                                                       controllers.Redirects.changeRedirect(id: ApplicationId)
POST        /applications/:id/redirect-uris/change-confirmation                                          controllers.Redirects.changeRedirectAction(id: ApplicationId)

GET         /applications/:id/delete                                                                     controllers.DeleteApplication.deleteApplication(id: ApplicationId, error: Option[String])
GET         /applications/:id/delete-principal-confirm                                                   controllers.DeleteApplication.confirmRequestDeletePrincipalApplication(id: ApplicationId, error: Option[String])
POST        /applications/:id/delete-principal                                                           controllers.DeleteApplication.requestDeletePrincipalApplicationAction(id: ApplicationId)
GET         /applications/:id/delete-subordinate-confirm                                                 controllers.DeleteApplication.deleteSubordinateApplicationConfirm(id: ApplicationId)
POST        /applications/:id/delete-subordinate                                                         controllers.DeleteApplication.deleteSubordinateApplicationAction(id: ApplicationId)

GET         /applications/:id/ip-allowlist                                                               controllers.IpAllowlist.viewIpAllowlist(id: ApplicationId)
GET         /applications/:id/ip-allowlist/allowed-ips                                                   controllers.IpAllowlist.allowedIps(id: ApplicationId)
GET         /applications/:id/ip-allowlist/setup                                                         controllers.IpAllowlist.settingUpAllowlist(id: ApplicationId)
GET         /applications/:id/ip-allowlist/change                                                        controllers.IpAllowlist.editIpAllowlist(id: ApplicationId)
POST        /applications/:id/ip-allowlist/change                                                        controllers.IpAllowlist.editIpAllowlistAction(id: ApplicationId)
GET         /applications/:id/ip-allowlist/add                                                           controllers.IpAllowlist.addCidrBlock(id: ApplicationId)
POST        /applications/:id/ip-allowlist/add                                                           controllers.IpAllowlist.addCidrBlockAction(id: ApplicationId)
GET         /applications/:id/ip-allowlist/remove                                                        controllers.IpAllowlist.removeCidrBlock(id: ApplicationId, cidrBlock: String)
POST        /applications/:id/ip-allowlist/remove                                                        controllers.IpAllowlist.removeCidrBlockAction(id: ApplicationId, cidrBlock: String)
GET         /applications/:id/ip-allowlist/activate                                                      controllers.IpAllowlist.reviewIpAllowlist(id: ApplicationId)
POST        /applications/:id/ip-allowlist/activate                                                      controllers.IpAllowlist.activateIpAllowlist(id: ApplicationId)
GET         /applications/:id/ip-allowlist/deactivate                                                    controllers.IpAllowlist.removeIpAllowlist(id: ApplicationId)
POST        /applications/:id/ip-allowlist/deactivate                                                    controllers.IpAllowlist.removeIpAllowlistAction(id: ApplicationId)

GET         /applications/:id/subscriptions                                                              controllers.Subscriptions.manageSubscriptions(id: ApplicationId)

POST        /applications/:id/change-subscription                                                        controllers.Subscriptions.changeApiSubscription(id: ApplicationId, context: ApiContext, version: ApiVersion, redirectTo: String)

GET         /applications/:id/change-locked-subscription                                                 controllers.Subscriptions.changeLockedApiSubscription(id: ApplicationId, name: String, context: ApiContext, version: ApiVersion, redirectTo: String)
POST        /applications/:id/change-locked-subscription                                                 controllers.Subscriptions.changeLockedApiSubscriptionAction(id: ApplicationId, name: String, context: ApiContext, version: ApiVersion, redirectTo: String)

GET         /applications/:id/change-private-subscription                                                controllers.Subscriptions.changePrivateApiSubscription(id: ApplicationId, name: String, context: ApiContext, version: ApiVersion, redirectTo: String)
POST        /applications/:id/change-private-subscription                                                controllers.Subscriptions.changePrivateApiSubscriptionAction(id: ApplicationId, name: String, context: ApiContext, version: ApiVersion, redirectTo: String)

GET         /applications/:id/credentials                                                                controllers.Credentials.credentials(id: ApplicationId)
GET         /applications/:id/client-id                                                                  controllers.Credentials.clientId(id: ApplicationId)
GET         /applications/:id/client-secrets                                                             controllers.Credentials.clientSecrets(id: ApplicationId)
GET         /applications/:id/server-token                                                               controllers.Credentials.serverToken(id: ApplicationId)
GET         /applications/:id/client-secret/:clientSecretId/delete                                       controllers.Credentials.deleteClientSecret(id: ApplicationId, clientSecretId: String)
POST        /applications/:id/client-secret/:clientSecretId/delete                                       controllers.Credentials.deleteClientSecretAction(id: ApplicationId, clientSecretId: String)
POST        /applications/:id/client-secret-new                                                          controllers.Credentials.addClientSecret(id: ApplicationId)

GET         /applications/:id/request-check                                                              controllers.checkpages.ApplicationCheck.requestCheckPage(id: ApplicationId)
POST        /applications/:id/request-check                                                              controllers.checkpages.ApplicationCheck.requestCheckAction(id: ApplicationId)
GET         /applications/:id/request-check/submitted                                                    controllers.checkpages.ApplicationCheck.credentialsRequested(id: ApplicationId)
GET         /applications/:id/request-check/appDetails                                                   controllers.checkpages.ApplicationCheck.unauthorisedAppDetails(id: ApplicationId)

GET         /applications/:id/request-check/name                                                         controllers.checkpages.ApplicationCheck.namePage(id: ApplicationId)
POST        /applications/:id/request-check/name                                                         controllers.checkpages.ApplicationCheck.nameAction(id: ApplicationId)
GET         /applications/:id/request-check/contact                                                      controllers.checkpages.ApplicationCheck.contactPage(id: ApplicationId)
POST        /applications/:id/request-check/contact                                                      controllers.checkpages.ApplicationCheck.contactAction(id: ApplicationId)
GET         /applications/:id/request-check/subscriptions                                                controllers.checkpages.ApplicationCheck.apiSubscriptionsPage(id: ApplicationId)
POST        /applications/:id/request-check/subscriptions                                                controllers.checkpages.ApplicationCheck.apiSubscriptionsAction(id: ApplicationId)
GET         /applications/:id/request-check/privacy-policy                                               controllers.checkpages.ApplicationCheck.privacyPolicyPage(id: ApplicationId)
POST        /applications/:id/request-check/privacy-policy                                               controllers.checkpages.ApplicationCheck.privacyPolicyAction(id: ApplicationId)
GET         /applications/:id/request-check/terms-and-conditions                                         controllers.checkpages.ApplicationCheck.termsAndConditionsPage(id: ApplicationId)
POST        /applications/:id/request-check/terms-and-conditions                                         controllers.checkpages.ApplicationCheck.termsAndConditionsAction(id: ApplicationId)
GET         /applications/:id/request-check/terms-of-use                                                 controllers.checkpages.ApplicationCheck.termsOfUsePage(id: ApplicationId)
POST        /applications/:id/request-check/terms-of-use                                                 controllers.checkpages.ApplicationCheck.termsOfUseAction(id: ApplicationId)
GET         /applications/:id/request-check/team                                                         controllers.checkpages.ApplicationCheck.team(id: ApplicationId)
POST        /applications/:id/request-check/team                                                         controllers.checkpages.ApplicationCheck.teamAction(id: ApplicationId)
GET         /applications/:id/request-check/team/add                                                     controllers.checkpages.ApplicationCheck.teamAddMember(id: ApplicationId)
GET         /applications/:id/request-check/team/remove-confirmation/:teamMemberHash                     controllers.checkpages.ApplicationCheck.teamMemberRemoveConfirmation(id: ApplicationId, teamMemberHash: String)
POST        /applications/:id/request-check/team/remove                                                  controllers.checkpages.ApplicationCheck.teamMemberRemoveAction(id: ApplicationId)

GET         /applications/:id/add/subscription-configuration-start                                       controllers.ManageSubscriptions.subscriptionConfigurationStart(id: ApplicationId)
GET         /applications/:id/add/subscription-configuration/:pageNumber                                 controllers.ManageSubscriptions.subscriptionConfigurationPage(id: ApplicationId, pageNumber: Int)
POST        /applications/:id/add/subscription-configuration/:pageNumber                                 controllers.ManageSubscriptions.subscriptionConfigurationPagePost(id: ApplicationId,pageNumber: Int)
GET         /applications/:id/add/subscription-configuration-step/:pageNumber                            controllers.ManageSubscriptions.subscriptionConfigurationStepPage(id: ApplicationId, pageNumber: Int)

GET         /applications/:id/check-your-answers/name                                                    controllers.checkpages.CheckYourAnswers.namePage(id: ApplicationId)
POST        /applications/:id/check-your-answers/name                                                    controllers.checkpages.CheckYourAnswers.nameAction(id: ApplicationId)
GET         /applications/:id/check-your-answers/contact                                                 controllers.checkpages.CheckYourAnswers.contactPage(id: ApplicationId)
POST        /applications/:id/check-your-answers/contact                                                 controllers.checkpages.CheckYourAnswers.contactAction(id: ApplicationId)
GET         /applications/:id/check-your-answers/subscriptions                                           controllers.checkpages.CheckYourAnswers.apiSubscriptionsPage(id: ApplicationId)
POST        /applications/:id/check-your-answers/subscriptions                                           controllers.checkpages.CheckYourAnswers.apiSubscriptionsAction(id: ApplicationId)
GET         /applications/:id/check-your-answers/privacy-policy                                          controllers.checkpages.CheckYourAnswers.privacyPolicyPage(id: ApplicationId)
POST        /applications/:id/check-your-answers/privacy-policy                                          controllers.checkpages.CheckYourAnswers.privacyPolicyAction(id: ApplicationId)
GET         /applications/:id/check-your-answers/terms-and-conditions                                    controllers.checkpages.CheckYourAnswers.termsAndConditionsPage(id: ApplicationId)
POST        /applications/:id/check-your-answers/terms-and-conditions                                    controllers.checkpages.CheckYourAnswers.termsAndConditionsAction(id: ApplicationId)
GET         /applications/:id/check-your-answers/terms-of-use                                            controllers.checkpages.CheckYourAnswers.termsOfUsePage(id: ApplicationId)
POST        /applications/:id/check-your-answers/terms-of-use                                            controllers.checkpages.CheckYourAnswers.termsOfUseAction(id: ApplicationId)
GET         /applications/:id/check-your-answers/team                                                    controllers.checkpages.CheckYourAnswers.team(id: ApplicationId)
POST        /applications/:id/check-your-answers/team                                                    controllers.checkpages.CheckYourAnswers.teamAction(id: ApplicationId)
GET         /applications/:id/check-your-answers/team/add                                                controllers.checkpages.CheckYourAnswers.teamAddMember(id: ApplicationId)
GET         /applications/:id/check-your-answers/team/remove-confirmation/:teamMemberHash                controllers.checkpages.CheckYourAnswers.teamMemberRemoveConfirmation(id: ApplicationId, teamMemberHash: String)
POST        /applications/:id/check-your-answers/team/remove                                             controllers.checkpages.CheckYourAnswers.teamMemberRemoveAction(id: ApplicationId)

GET         /applications/:id/check-your-answers                                                         controllers.checkpages.CheckYourAnswers.answersPage(id: ApplicationId)
POST        /applications/:id/check-your-answers                                                         controllers.checkpages.CheckYourAnswers.answersPageAction(id: ApplicationId)

GET         /applications/:id/api-metadata                                                               controllers.ManageSubscriptions.listApiSubscriptions(id: ApplicationId)
GET         /applications/:id/api-metadata/:context/:version/:saveSubsFieldsPageMode                     controllers.ManageSubscriptions.editApiMetadataPage(id: ApplicationId, context: ApiContext, version: ApiVersion, saveSubsFieldsPageMode: SaveSubsFieldsPageMode)
POST        /applications/:id/api-metadata/:context/:version/:saveSubsFieldsPageMode                     controllers.ManageSubscriptions.saveSubscriptionFields(id: ApplicationId, context: ApiContext, version: ApiVersion, saveSubsFieldsPageMode: SaveSubsFieldsPageMode)
GET         /applications/:id/api-metadata/:context/:version/fields/:fieldName/:saveSubsFieldsPageMode   controllers.ManageSubscriptions.editApiMetadataFieldPage(id: ApplicationId, context: ApiContext, version: ApiVersion, fieldName: String, saveSubsFieldsPageMode: SaveSubsFieldsPageMode)
POST        /applications/:id/api-metadata/:context/:version/fields/:fieldName/:saveSubsFieldsPageMode   controllers.ManageSubscriptions.saveApiMetadataFieldPage(id: ApplicationId, context: ApiContext, version: ApiVersion, fieldName: String, saveSubsFieldsPageMode: SaveSubsFieldsPageMode)

GET         /applications/:id/push-secrets                                                               controllers.PushPullNotifications.showPushSecrets(id: ApplicationId)

GET         /applications/:id/add/subscriptions                                                          controllers.Subscriptions.addAppSubscriptions(id: ApplicationId)

GET         /application-verification                                                                    controllers.ApplicationVerification.verifyUplift(code: String)
GET         /user-navlinks                                                                               controllers.Navigation.navLinks

GET         /partials/terms-of-use                                                                       controllers.TermsOfUse.termsOfUsePartial

GET         /assets/*file                                                                                @controllers.Assets.versioned(path="/public", file: Asset)

GET         /keep-alive                                                                                  controllers.SessionController.keepAlive()

GET         /applications/:id/confirm-subscriptions                                                      uk.gov.hmrc.modules.uplift.controllers.UpliftJourneyController.confirmApiSubscriptionsPage(id: ApplicationId)
POST        /applications/:id/confirm-subscriptions                                                      uk.gov.hmrc.modules.uplift.controllers.UpliftJourneyController.confirmApiSubscriptionsAction(id: ApplicationId)

GET         /applications/:id/change-api-subscriptions                                                   uk.gov.hmrc.modules.uplift.controllers.UpliftJourneyController.changeApiSubscriptions(id: ApplicationId)
POST        /applications/:id/change-api-subscriptions                                                   uk.gov.hmrc.modules.uplift.controllers.UpliftJourneyController.saveApiSubscriptionsSubmit(id: ApplicationId)

GET         /applications/:id/responsible-individual                                                     uk.gov.hmrc.modules.uplift.controllers.UpliftJourneyController.responsibleIndividual(id: ApplicationId)
POST        /applications/:id/responsible-individual                                                     uk.gov.hmrc.modules.uplift.controllers.UpliftJourneyController.responsibleIndividualAction(id: ApplicationId)

GET         /applications/:id/sell-resell-or-distribute-your-software                                    uk.gov.hmrc.modules.uplift.controllers.UpliftJourneyController.sellResellOrDistributeYourSoftware(id: ApplicationId)
POST        /applications/:id/sell-resell-or-distribute-your-software                                    uk.gov.hmrc.modules.uplift.controllers.UpliftJourneyController.sellResellOrDistributeYourSoftwareAction(id: ApplicationId)

->         /govuk-frontend       govuk.Routes
->         /hmrc-frontend        hmrcfrontend.Routes
